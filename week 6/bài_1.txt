#include <iostream>
#include <vector>
#include <set>

using namespace std;

void dfs(vector<vector<int>>& graph, set<int>& visited, int node) {
    visited.insert(node);
    for (int neighbor : graph[node]) {
        if (!visited.count(neighbor)) {
            dfs(graph, visited, neighbor);
        }
    }
}

int count_connected_components(vector<vector<int>>& graph) {
    set<int> visited;
    int count = 0;
    for (int node = 0; node < graph.size(); node++) {
        if (!visited.count(node)) {
            dfs(graph, visited, node);
            count++;
        }
    }
    return count;
}

int main()
{
    int n, m;
    cin >> n >> m;
    vector<vector<int>> graph(n);
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        graph[x - 1].push_back(y - 1);
        graph[y - 1].push_back(x - 1);
    }

    int count = count_connected_components(graph);
    cout << count << endl;

    return 0;
}
